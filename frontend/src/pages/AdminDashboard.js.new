import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import HttpService from '../services/httpService';
import './AdminDashboard.css';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, BarElement } from 'chart.js';
import { Pie } from 'react-chartjs-2';
import { Menu, MenuItem, IconButton } from '@mui/material';

ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, BarElement);

function AdminDashboard() {
    const navigate = useNavigate();
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [retryCount, setRetryCount] = useState(0);
    const [stats, setStats] = useState({
        totalUsers: 0,
        validatedUsers: 0,
        pendingUsers: 0,
        activeUsers: 0,
        userActivity: [],
        userRoles: { admin: 0, user: 0 }
    });
    const [selectedUser, setSelectedUser] = useState(null);
    const [menuAnchorEl, setMenuAnchorEl] = useState(null);
    const [activeUserId, setActiveUserId] = useState(null);

    const fetchUsers = async () => {
        try {
            setLoading(true);
            setError('');
            
            const token = localStorage.getItem('token');
            if (!token) {
                navigate('/login');
                return;
            }

            const response = await HttpService.get('/api/admin/users', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (!response || !response.data) {
                throw new Error('Format de réponse invalide');
            }

            const processedData = response.data.map(user => ({
                ...user,
                accountValidated: user.role === 'ROLE_ADMIN' ? true : user.accountValidated
            }));

            setUsers(processedData);
            setError('');
            
            const newStats = {
                totalUsers: processedData.length,
                validatedUsers: processedData.filter(u => u.accountValidated).length,
                pendingUsers: processedData.filter(u => !u.accountValidated).length,
                activeUsers: processedData.filter(u => u.lastLoginDate && new Date(u.lastLoginDate) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)).length,
                userRoles: {
                    admin: processedData.filter(u => u.role === 'ROLE_ADMIN').length,
                    user: processedData.filter(u => u.role === 'ROLE_USER').length
                }
            };
            setStats(newStats);
            
        } catch (err) {
            console.error('Erreur lors de la récupération des utilisateurs:', err);
            if (err.response?.status === 401) {
                localStorage.removeItem('token');
                navigate('/login');
                return;
            }
            
            if (err.response) {
                setError(err.response.data?.message || 'Erreur lors de la récupération des utilisateurs');
            } else if (err.request) {
                if (retryCount < 3) {
                    setTimeout(() => {
                        setRetryCount(prev => prev + 1);
                        fetchUsers();
                    }, 2000);
                    setError('Tentative de reconnexion au serveur...');
                } else {
                    setError('Impossible de contacter le serveur. Veuillez rafraîchir la page.');
                }
            } else {
                setError('Une erreur inattendue est survenue');
            }
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    const handleValidateAccount = async (userId) => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                navigate('/login');
                return;
            }

            await HttpService.put(`/api/admin/users/${userId}/validate`, {
                enabled: true,
                accountValidated: true
            }, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            await fetchUsers();
            
        } catch (err) {
            console.error('Erreur lors de la validation du compte:', err);
            setError('Erreur lors de la validation du compte');
        }
    };

    const chartData = {
        labels: ['Utilisateurs validés', 'Utilisateurs en attente'],
        datasets: [
            {
                data: [stats.validatedUsers, stats.pendingUsers],
                backgroundColor: ['#4CAF50', '#FFC107'],
                borderColor: ['#388E3C', '#FFA000'],
                borderWidth: 1,
            },
        ],
    };

    const renderUserList = () => {
        return users.map(user => (
            <div key={user.id} className="user-card">
                <div className="user-info">
                    <h3>{user.username}</h3>
                    <p>Role: {user.role}</p>
                    <p>Status: {user.accountValidated ? 'Validé' : 'En attente'}</p>
                </div>
                {!user.accountValidated && (
                    <button 
                        className="validate-button"
                        onClick={() => handleValidateAccount(user.id)}
                    >
                        Valider
                    </button>
                )}
            </div>
        ));
    };

    return (
        <div className="admin-dashboard">
            {error && (
                <div className="error-message">
                    <p>{error}</p>
                    {retryCount > 0 && retryCount < 3 && (
                        <p>Tentative {retryCount}/3...</p>
                    )}
                    <button onClick={() => {
                        setRetryCount(0);
                        setError('');
                        fetchUsers();
                    }}>
                        Réessayer
                    </button>
                </div>
            )}
            
            {loading ? (
                <div className="loading-container">
                    <div className="loading-spinner"></div>
                    <p>Chargement du tableau de bord...</p>
                </div>
            ) : (
                <>
                    <div className="dashboard-header">
                        <h1>Tableau de bord administrateur</h1>
                    </div>

                    <div className="dashboard-stats">
                        <div className="stats-card">
                            <h3>Statistiques Utilisateurs</h3>
                            <div className="stats-grid">
                                <div className="stat-item">
                                    <p>Total</p>
                                    <h4>{stats.totalUsers}</h4>
                                </div>
                                <div className="stat-item">
                                    <p>Validés</p>
                                    <h4>{stats.validatedUsers}</h4>
                                </div>
                                <div className="stat-item">
                                    <p>En attente</p>
                                    <h4>{stats.pendingUsers}</h4>
                                </div>
                                <div className="stat-item">
                                    <p>Actifs</p>
                                    <h4>{stats.activeUsers}</h4>
                                </div>
                            </div>
                        </div>

                        <div className="chart-container">
                            <h3>Répartition des utilisateurs</h3>
                            <Pie data={chartData} />
                        </div>
                    </div>

                    <div className="users-section">
                        <h2>Liste des utilisateurs</h2>
                        <div className="users-grid">
                            {renderUserList()}
                        </div>
                    </div>
                </>
            )}
        </div>
    );
}

export default AdminDashboard;
