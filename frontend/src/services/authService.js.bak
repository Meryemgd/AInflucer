import axios from 'axios';

const API_URL = 'http://localhost:8080/api';

const authService = {
    login: async (email, password) => {
        try {
            const response = await axios.post(`${API_URL}/auth/login`, {
                email,
                password
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            
            const data = response.data;
            
            if (!data || !data.token || !data.roleName) {
                throw new Error('Réponse invalide du serveur');
            }
            
            localStorage.setItem('token', data.token);
            localStorage.setItem('role', data.roleName);
            localStorage.setItem('username', data.username);
            localStorage.setItem('accountValidated', String(data.accountValidated));
            
            return data;
        } catch (error) {
            if (error.response) {
                throw new Error(error.response.data.message || 'Erreur de connexion');
            }
            throw error;
        }
    },

    logout: () => {
        localStorage.removeItem('token');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
        localStorage.removeItem('accountValidated');
    },

    getCurrentUser: () => {
        const token = localStorage.getItem('token');
        const role = localStorage.getItem('role');
        const username = localStorage.getItem('username');
        const accountValidated = localStorage.getItem('accountValidated') === 'true';

        if (!token || !role || !username) {
            return null;
        }

        return {
            token,
            roleName: role,
            username,
            accountValidated
        };
    }
};

axios.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

export default authService;

const authService = {
    login: async (email, password) => {
        try {
            console.log('AuthService: Tentative de connexion avec:', { email });
            
            const response = await axios.post(`${API_URL}/auth/login`, {
                email,
                password
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            
            console.log('AuthService: Réponse complète:', response);
            const data = response.data;
            
            if (!data || !data.token || !data.roleName) {
                console.error('AuthService: Données manquantes dans la réponse:', data);
                throw new Error('Réponse invalide du serveur');
            }
            
            // Stockage des informations de l'utilisateur
            localStorage.setItem('token', data.token);
            localStorage.setItem('role', data.roleName);
            localStorage.setItem('username', data.username);
            localStorage.setItem('accountValidated', String(data.accountValidated));
            
            return data;
        } catch (error) {
            console.error('AuthService: Erreur de connexion:', error);
            if (error.response) {
                throw new Error(error.response.data.message || 'Erreur de connexion');
            }
            throw error;
        }
    },

    logout: () => {
        localStorage.removeItem('token');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
        localStorage.removeItem('accountValidated');
    },

    getCurrentUser: () => {
        const token = localStorage.getItem('token');
        const role = localStorage.getItem('role');
        const username = localStorage.getItem('username');
        const accountValidated = localStorage.getItem('accountValidated') === 'true';

        if (!token || !role || !username) {
            return null;
        }

        return {
            token,
            roleName: role,
            username,
            accountValidated
        };
    },

    isAuthenticated: () => {
        return !!localStorage.getItem('token');
    },

    getToken: () => {
        return localStorage.getItem('token');
    }
};

// Configure axios pour inclure le token dans toutes les requêtes
axios.interceptors.request.use(
    (config) => {
        const token = authService.getToken();
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

export default authService;

// Configure axios pour inclure le token dans toutes les requêtes
axios.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

const authService = {
    login: async (email, password) => {
        try {
            console.log('AuthService: Tentative de connexion avec:', { email });
            
            const response = await axios.post(`${API_URL}/auth/login`, {
                email,
                password
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            
            console.log('AuthService: Réponse complète:', response);
            const data = response.data;
            
            if (!data || !data.token || !data.roleName) {
                console.error('AuthService: Données manquantes dans la réponse:', data);
                throw new Error('Réponse invalide du serveur');
            }
            
            // Stockage des informations de l'utilisateur
            localStorage.setItem('token', data.token);
            localStorage.setItem('role', data.roleName);
            localStorage.setItem('username', data.username);
            localStorage.setItem('accountValidated', String(data.accountValidated));
            
            return data;
        } catch (error) {
            console.error('AuthService: Erreur de connexion:', error);
            if (error.response) {
                throw new Error(error.response.data.message || 'Erreur de connexion');
            }
            throw error;
        }
    },

    logout: () => {
        localStorage.removeItem('token');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
        localStorage.removeItem('accountValidated');
    },

    getCurrentUser: () => {
        const token = localStorage.getItem('token');
        const role = localStorage.getItem('role');
        const username = localStorage.getItem('username');
        const accountValidated = localStorage.getItem('accountValidated') === 'true';

        if (!token || !role || !username) {
            return null;
        }

        return {
            token,
            roleName: role,
            username,
            accountValidated
        };
    },

    isAuthenticated: () => {
        return !!localStorage.getItem('token');
    },

    getToken: () => {
        return localStorage.getItem('token');
    }
};

export default authService;

const authService = {
    login: async (email, password) => {
        try {
            console.log('AuthService: Tentative de connexion avec:', { email });
            
            const response = await axios.post(`${API_URL}/auth/login`, {
                email,
                password
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            
            console.log('AuthService: Réponse complète:', response);
            const data = response.data;
            
            if (!data || !data.token || !data.roleName) {
                console.error('AuthService: Données manquantes dans la réponse:', data);
                throw new Error('Réponse invalide du serveur');
            }
            
            // Stockage des informations de l'utilisateur
            localStorage.setItem('token', data.token);
            localStorage.setItem('role', data.roleName);
            localStorage.setItem('username', data.username);
            localStorage.setItem('accountValidated', String(data.accountValidated));
            
            return data;
        } catch (error) {
            console.error('AuthService: Erreur de connexion:', error);
            if (error.response) {
                throw new Error(error.response.data.message || 'Erreur de connexion');
            }
            throw error;
        }
    },

    logout: () => {
        localStorage.removeItem('token');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
        localStorage.removeItem('accountValidated');
    },

    getCurrentUser: () => {
        const token = localStorage.getItem('token');
        const role = localStorage.getItem('role');
        const username = localStorage.getItem('username');
        const accountValidated = localStorage.getItem('accountValidated') === 'true';

        if (!token || !role || !username) {
            return null;
        }

        return {
            token,
            roleName: role,
            username,
            accountValidated
        };
    },

    isAuthenticated: () => {
        return !!localStorage.getItem('token');
    },

    getToken: () => {
        return localStorage.getItem('token');
    }
};

// Configure axios pour inclure le token dans toutes les requêtes
axios.interceptors.request.use(
    (config) => {
        const token = authService.getToken();
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

export default authService;

const authService = {
    login: async (email, password) => {
        try {
            console.log('AuthService: Tentative de connexion avec:', { email });
            
            const response = await axios.post(`${API_URL}/auth/login`, {
                email,
                password
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            
            console.log('AuthService: Réponse complète:', response);
            const data = response.data;
            
            if (!data || !data.token || !data.roleName) {
                throw new Error('Réponse invalide du serveur');
            }
                if (!response.data.accountValidated) {
                    throw new Error('Votre compte n\'est pas encore validé. Veuillez patienter.');
                }
                
                console.log('AuthService: Token reçu, stockage des informations...');
                
                // Stockage des informations de l'utilisateur
                localStorage.setItem('token', response.data.token);
                localStorage.setItem('role', response.data.roleName);
                localStorage.setItem('userRole', response.data.roleName);
                localStorage.setItem('accountValidated', String(response.data.accountValidated));
                localStorage.setItem('username', response.data.username);
                
                // Retourner les informations nécessaires
                return {
                    token: response.data.token,
                    roleName: response.data.roleName,
                    accountValidated: response.data.accountValidated,
                    username: response.data.username
                };
            } else {
                console.error('AuthService: Réponse invalide:', response);
                throw new Error(response.data.message || 'Erreur de connexion');
            }
        } catch (error) {
            console.error('AuthService: Erreur lors de la connexion:', error);
            const errorMessages = {
                401: 'Email ou mot de passe incorrect',
                403: 'Votre compte n\'est pas encore activé',
                404: 'Ce compte n\'existe pas',
                400: 'Informations de connexion invalides',
                500: 'Service momentanément indisponible'
            };

            if (error.response) {
                const message = errorMessages[error.response.status] || 'Erreur de connexion';
                throw new Error(message);
            }
            throw new Error('Vérifiez votre connexion internet');
        }
    }

    async register(username, email, password) {
        try {
            const response = await axios.post(`${API_URL}/auth/register`, {
                username,
                email,
                password
            });
            return response.data;
        } catch (error) {
            if (error.response) {
                throw new Error(error.response.data.message || 'Erreur d\'inscription');
            }
            throw error;
        }
    }

    async getCurrentUserRole() {
        try {
            // Récupérer directement depuis le localStorage
            const userRole = localStorage.getItem('userRole');
            console.log('AuthService: getCurrentUserRole - Role from localStorage:', userRole);
            return userRole;
        } catch (error) {
            console.error('Erreur lors de la récupération du rôle:', error);
            return null;
        }
    }

    async validateUser(userId, isValidated) {
        try {
            const token = localStorage.getItem('token');
            const response = await axios.post(
                `${API_URL}/users/${userId}/validate`,
                { validated: isValidated },
                { headers: { 'Authorization': `Bearer ${token}` }}
            );
            return response.data;
        } catch (error) {
            throw new Error(error.response?.data?.message || 'Erreur de validation');
        }
    }

    getRedirectPathForRole(role) {
        switch(role) {
            case 'ROLE_ADMIN':
                return '/admin';
            case 'ROLE_USER':
                return '/dashboard';
            case 'ROLE_CLIENT':
                return '/client';
            case 'ROLE_CM':
                return '/cm';
            default:
                return '/login';
        }
    }

    logout() {
        localStorage.removeItem('token');
    }

    getCurrentUser() {
        const token = localStorage.getItem('token');
        if (!token) return null;

        try {
            // Décode le token JWT (partie payload)
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload;
        } catch {
            return null;
        }
    }

    isAuthenticated() {
        const token = localStorage.getItem('token');
        if (!token) return false;

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            // Vérifie si le token n'est pas expiré
            return payload.exp > Date.now() / 1000;
        } catch {
            return false;
        }
    }

    getToken() {
        return localStorage.getItem('token');
    }

    // Intercepteur pour ajouter le token à toutes les requêtes
    setupAxiosInterceptors() {
        axios.interceptors.request.use(
            (config) => {
                const token = this.getToken();
                if (token) {
                    config.headers['Authorization'] = `Bearer ${token}`;
                }
                return config;
            },
            (error) => {
                return Promise.reject(error);
            }
        );

        axios.interceptors.response.use(
            (response) => response,
            (error) => {
                if (error.response?.status === 401) {
                    this.logout();
                    window.location.href = '/login';
                }
                return Promise.reject(error);
            }
        );
    }
}

const authService = new AuthService();
authService.setupAxiosInterceptors();

export default authService;
