import { API_BASE_URL } from '../config';

const isTokenExpired = (token) => {
    if (!token) return true;
    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        return payload.exp * 1000 < Date.now();
    } catch (e) {
        console.error('Erreur lors de la vérification du token:', e);
        return true;
    }
};

const handleResponse = async (response) => {
    if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.message || 'Erreur réseau');
    }
    return response.json();
};

const request = async (url, options = {}) => {
    try {
        const token = localStorage.getItem('token');
        const isAuthRequest = url.includes('/auth/login') || url.includes('/auth/register');

        if (!isAuthRequest && isTokenExpired(token)) {
            localStorage.removeItem('token');
            window.location.href = '/login';
            return;
        }

        const defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            ...(token ? { 'Authorization': `Bearer ${token}` } : {})
        };

        const config = {
            ...options,
            headers: {
                ...defaultHeaders,
                ...options.headers
            }
        };

        const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;
        console.log('Envoi requête à:', fullUrl);
        
        const response = await fetch(fullUrl, config);
        return handleResponse(response);
    } catch (error) {
        console.error('Erreur requête HTTP:', error);
        throw error;
    }
};

const HttpService = {
    get: (url, options = {}) => request(url, { ...options, method: 'GET' }),
    
    post: (url, data, options = {}) => request(url, {
        ...options,
        method: 'POST',
        body: JSON.stringify(data)
    }),
    
    put: (url, data, options = {}) => request(url, {
        ...options,
        method: 'PUT',
        body: JSON.stringify(data)
    }),
    
    delete: (url, options = {}) => request(url, {
        ...options,
        method: 'DELETE'
    })
};

export default HttpService;
